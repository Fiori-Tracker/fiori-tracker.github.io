*&---------------------------------------------------------------------*
*& Report ZTRTOOL
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ztrtool3.

DATA: it_keys         TYPE tr_keys,
      it_obj          TYPE tr_objects,
      it_obj_entries  TYPE cts_obj_entries,
      it_objects_tr   TYPE scts_tadir,
      it_task_headers TYPE STANDARD TABLE OF trwbo_request_header.

DATA: wa_req_header TYPE trwbo_request_header,
      wa_add_req    TYPE trwbo_request_header.

DATA: v_additional_step TYPE string,
      v_devclass        TYPE devclass,
      v_obj_entry       TYPE cts_obj_entry,
      v_tr_name         TYPE as4text,
      v_descr           TYPE as4text,
      v_user            TYPE scts_user.

CONSTANTS: cv_tr_name           TYPE as4text VALUE ''.     " prefix for TR description


SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE TEXT-t01.
PARAMETERS: p_ftcore TYPE flag RADIOBUTTON GROUP rb01,
            p_catimp TYPE flag RADIOBUTTON GROUP rb01,
            p_catapp TYPE flag RADIOBUTTON GROUP rb01,
            p_asisce TYPE flag RADIOBUTTON GROUP rb01,
            p_asisma TYPE flag RADIOBUTTON GROUP rb01.

SELECTION-SCREEN END OF BLOCK b01.

*SELECTION-SCREEN BEGIN OF BLOCK b02 WITH FRAME TITLE TEXT-t02.
*PARAMETERS: p_rel TYPE flag AS CHECKBOX.
*SELECTION-SCREEN END OF BLOCK b02.

START-OF-SELECTION.
  CLEAR v_additional_step.
  CASE abap_true.
    WHEN p_ftcore.
      v_additional_step = 'ftcore'.
      v_devclass = 'ZNYPEFTCENCOR'.
      v_descr = 'Fiori Tracker Core 2020 FPS01 :TransTool'.
    WHEN p_catapp.
      v_devclass = 'ZNYPECACENREP'.
      v_descr = 'Fiori Tracker Catalog Apps Report 2020 FPS01 :TransTool'.
    WHEN p_catimp.
      v_additional_step = 'catimp'.
      v_devclass = 'ZNYPECICEN'.
      v_descr = 'Fiori Tracker Catalog Import 2020 FPS01 :TransTool'.
    WHEN p_asisce.
      v_devclass = 'ZNYPEASISCEN'.
      v_descr = 'Fiori Tracker As-Is Central 2020 FPS01 :TransTool'.
    WHEN p_asisma.
      v_devclass = 'ZNYPEASISMAN'.
      v_descr = 'Fiori Tracker As-Is Managed 2020 FPS01 :TransTool'.

  ENDCASE.
  v_tr_name = |{ cv_tr_name }{ v_descr }|.
  "1. Create TR
  CALL FUNCTION 'TR_INSERT_REQUEST_WITH_TASKS'
    EXPORTING
      iv_type           = 'T'
      iv_text           = v_tr_name
      iv_target         = 'NPL'
    IMPORTING
      es_request_header = wa_req_header
      et_task_headers   = it_task_headers
    EXCEPTIONS
      insert_failed     = 1
      enqueue_failed    = 2
      OTHERS            = 3.

  IF sy-subrc <> 0.
    WRITE: / 'Cant create transport request - ending.'.
    exit.
  ENDIF.


  "2. Get Object List From Package
  CALL FUNCTION 'TRINT_SELECT_OBJECTS'
    EXPORTING
      iv_devclass       = v_devclass
      iv_via_selscreen  = ''
    IMPORTING
      et_objects_tadir  = it_objects_tr
    EXCEPTIONS
      cancelled_by_user = 1
      invalid_input     = 2
      OTHERS            = 3.


  IF sy-subrc <> 0.
    WRITE: / 'Cant select object list from package - ending.'.
    EXIT.
  ENDIF.

  MOVE-CORRESPONDING it_objects_tr TO it_obj_entries.
  v_obj_entry-operation = 'I'.
  MODIFY it_obj_entries FROM v_obj_entry TRANSPORTING operation WHERE operation IS INITIAL.
  "3. Add Object List To transport Request
  CALL FUNCTION 'TR_REQUEST_CHOICE'
    EXPORTING
      iv_suppress_dialog   = 'X'
      iv_request           = wa_req_header-trkorr
      it_obj_entries       = it_obj_entries
    EXCEPTIONS
      invalid_request      = 1
      invalid_request_type = 2
      user_not_owner       = 3
      no_objects_appended  = 4
      enqueue_error        = 5
      cancelled_by_user    = 6
      recursive_call       = 7
      OTHERS               = 8.
  IF sy-subrc <> 0.
    WRITE: / 'Cant add objects list to TR - ending.'.
    EXIT.
  ENDIF.


  case v_additional_step.
  when 'ftcore'.
    PERFORM additional_step.
    WRITE: / 'Transport request for ftcore created: ', wa_req_header-trkorr.
    exit.

  when 'catimp'.
    PERFORM additional_step_catimp.
    WRITE: / 'Transport request for cat imp created: ', wa_req_header-trkorr.
    exit.

  when others.

    WRITE: / 'Transport request for ftcore created: ', wa_req_header-trkorr.
    exit.

  endcase.


FORM additional_step.

  "4. Additional Step: Append Objects From NPLK901002 Catalogs
  wa_add_req-trkorr = 'NPLK901002'.
  CALL FUNCTION 'TR_GET_OBJECTS_OF_REQ_AN_TASKS'
    EXPORTING
      is_request_header = wa_add_req
    IMPORTING
      et_objects        = it_obj
    EXCEPTIONS
      invalid_input     = 1
      OTHERS            = 2.
  IF sy-subrc <> 0.

    WRITE: / 'Error during reading Catalogs - ending'.
    RETURN.
  ELSE.
    CLEAR it_obj_entries[].
    DELETE it_obj WHERE pgmid = 'CORR'.
    MOVE-CORRESPONDING it_obj[] TO it_obj_entries[].
    MODIFY it_obj_entries FROM v_obj_entry TRANSPORTING operation WHERE operation IS INITIAL.
    IF sy-subrc = 0.
      CALL FUNCTION 'TR_REQUEST_CHOICE'
        EXPORTING
          iv_suppress_dialog   = 'X'
          iv_request           = wa_req_header-trkorr
          it_obj_entries       = it_obj_entries
        EXCEPTIONS
          invalid_request      = 1
          invalid_request_type = 2
          user_not_owner       = 3
          no_objects_appended  = 4
          enqueue_error        = 5
          cancelled_by_user    = 6
          recursive_call       = 7
          OTHERS               = 8.
      IF sy-subrc <> 0.
        WRITE: / 'Error during adding Catalogs'.
      ENDIF.
    ENDIF.



    "5. Additional Step: Append Objects From NPLK901004 Roles

    CLEAR it_obj[].

    wa_add_req-trkorr = 'NPLK901004'.
    CALL FUNCTION 'TR_GET_OBJECTS_OF_REQ_AN_TASKS'
      EXPORTING
        is_request_header = wa_add_req
      IMPORTING
        et_objects        = it_obj
        et_keys           = it_keys
      EXCEPTIONS
        invalid_input     = 1
        OTHERS            = 2.

    IF sy-subrc <> 0.
      WRITE: / 'Error during reading Roles - ending'.
      RETURN.

    ELSE.

      CLEAR it_obj_entries[].
      DELETE it_obj WHERE pgmid = 'CORR'.
      MOVE-CORRESPONDING it_obj[] TO it_obj_entries[].
      MODIFY it_obj_entries FROM v_obj_entry TRANSPORTING operation WHERE operation IS INITIAL.
      LOOP AT it_obj_entries ASSIGNING FIELD-SYMBOL(<wa_entry>)
      WHERE objfunc = 'K'.
        READ TABLE it_keys ASSIGNING FIELD-SYMBOL(<wa_key>)
        WITH KEY pgmid = <wa_entry>-pgmid
        object = <wa_entry>-object
        objname = <wa_entry>-obj_name.
        IF sy-subrc = 0.
          APPEND INITIAL LINE TO <wa_entry>-object_tables ASSIGNING FIELD-SYMBOL(<wa_key_entry>).
          <wa_key_entry>-objname = <wa_key>-objname.
          CREATE DATA <wa_key_entry>-tabkeys TYPE TABLE OF (<wa_key_entry>-objname).
          FIELD-SYMBOLS: <wa_tabkey> TYPE ANY TABLE.
          ASSIGN <wa_key_entry>-tabkeys->* TO <wa_tabkey>.

          DATA wa_dyn_data TYPE REF TO data.
          CREATE DATA wa_dyn_data TYPE (<wa_key_entry>-objname).
          ASSIGN wa_dyn_data->* TO FIELD-SYMBOL(<wa_dyn_data>).
          IF <wa_tabkey> IS ASSIGNED AND <wa_dyn_data> IS ASSIGNED .
            cl_abap_container_utilities=>read_container_c( EXPORTING
              im_container = <wa_key>-tabkey
            IMPORTING
              ex_value = <wa_dyn_data> ).
            INSERT <wa_dyn_data> INTO TABLE <wa_tabkey>.
          ENDIF.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 0.
        CALL FUNCTION 'TR_REQUEST_CHOICE'
          EXPORTING
            iv_suppress_dialog   = 'X'
            iv_request           = wa_req_header-trkorr
            it_obj_entries       = it_obj_entries
          EXCEPTIONS
            invalid_request      = 1
            invalid_request_type = 2
            user_not_owner       = 3
            no_objects_appended  = 4
            enqueue_error        = 5
            cancelled_by_user    = 6
            recursive_call       = 7
            OTHERS               = 8.
        IF sy-subrc <> 0.
          WRITE: / 'Error during adding Roles'.
        ELSE.
          WRITE: / 'Transport request created: ', wa_req_header-trkorr.
        ENDIF.
      ENDIF.


    ENDIF.


  ENDIF.

ENDFORM.

FORM additional_step_catimp.

  "4. Additional Step: Append Objects From NPLK901002 Catalogs
  wa_add_req-trkorr = 'NPLK901134'.
  CALL FUNCTION 'TR_GET_OBJECTS_OF_REQ_AN_TASKS'
    EXPORTING
      is_request_header = wa_add_req
    IMPORTING
      et_objects        = it_obj
    EXCEPTIONS
      invalid_input     = 1
      OTHERS            = 2.
  IF sy-subrc <> 0.

    WRITE: / 'Error during reading Catalogs - ending'.
    RETURN.
  ELSE.
    CLEAR it_obj_entries[].
    DELETE it_obj WHERE pgmid = 'CORR'.
    MOVE-CORRESPONDING it_obj[] TO it_obj_entries[].
    MODIFY it_obj_entries FROM v_obj_entry TRANSPORTING operation WHERE operation IS INITIAL.
    IF sy-subrc = 0.
      CALL FUNCTION 'TR_REQUEST_CHOICE'
        EXPORTING
          iv_suppress_dialog   = 'X'
          iv_request           = wa_req_header-trkorr
          it_obj_entries       = it_obj_entries
        EXCEPTIONS
          invalid_request      = 1
          invalid_request_type = 2
          user_not_owner       = 3
          no_objects_appended  = 4
          enqueue_error        = 5
          cancelled_by_user    = 6
          recursive_call       = 7
          OTHERS               = 8.
      IF sy-subrc <> 0.
        WRITE: / 'Error during adding Catalogs'.
      ENDIF.
    ENDIF.



    "5. Additional Step: Append Objects From NPLK901004 Roles

    CLEAR it_obj[].

    wa_add_req-trkorr = 'NPLK901140'.
    CALL FUNCTION 'TR_GET_OBJECTS_OF_REQ_AN_TASKS'
      EXPORTING
        is_request_header = wa_add_req
      IMPORTING
        et_objects        = it_obj
        et_keys           = it_keys
      EXCEPTIONS
        invalid_input     = 1
        OTHERS            = 2.

    IF sy-subrc <> 0.
      WRITE: / 'Error during reading Roles - ending'.
      RETURN.

    ELSE.

      CLEAR it_obj_entries[].
      DELETE it_obj WHERE pgmid = 'CORR'.
      MOVE-CORRESPONDING it_obj[] TO it_obj_entries[].
      MODIFY it_obj_entries FROM v_obj_entry TRANSPORTING operation WHERE operation IS INITIAL.
      LOOP AT it_obj_entries ASSIGNING FIELD-SYMBOL(<wa_entry>)
      WHERE objfunc = 'K'.
        READ TABLE it_keys ASSIGNING FIELD-SYMBOL(<wa_key>)
        WITH KEY pgmid = <wa_entry>-pgmid
        object = <wa_entry>-object
        objname = <wa_entry>-obj_name.
        IF sy-subrc = 0.
          APPEND INITIAL LINE TO <wa_entry>-object_tables ASSIGNING FIELD-SYMBOL(<wa_key_entry>).
          <wa_key_entry>-objname = <wa_key>-objname.
          CREATE DATA <wa_key_entry>-tabkeys TYPE TABLE OF (<wa_key_entry>-objname).
          FIELD-SYMBOLS: <wa_tabkey> TYPE ANY TABLE.
          ASSIGN <wa_key_entry>-tabkeys->* TO <wa_tabkey>.

          DATA wa_dyn_data TYPE REF TO data.
          CREATE DATA wa_dyn_data TYPE (<wa_key_entry>-objname).
          ASSIGN wa_dyn_data->* TO FIELD-SYMBOL(<wa_dyn_data>).
          IF <wa_tabkey> IS ASSIGNED AND <wa_dyn_data> IS ASSIGNED .
            cl_abap_container_utilities=>read_container_c( EXPORTING
              im_container = <wa_key>-tabkey
            IMPORTING
              ex_value = <wa_dyn_data> ).
            INSERT <wa_dyn_data> INTO TABLE <wa_tabkey>.
          ENDIF.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 0.
        CALL FUNCTION 'TR_REQUEST_CHOICE'
          EXPORTING
            iv_suppress_dialog   = 'X'
            iv_request           = wa_req_header-trkorr
            it_obj_entries       = it_obj_entries
          EXCEPTIONS
            invalid_request      = 1
            invalid_request_type = 2
            user_not_owner       = 3
            no_objects_appended  = 4
            enqueue_error        = 5
            cancelled_by_user    = 6
            recursive_call       = 7
            OTHERS               = 8.
        IF sy-subrc <> 0.
          WRITE: / 'Error during adding Roles'.
        ELSE.
          WRITE: / 'Transport request created: ', wa_req_header-trkorr.
        ENDIF.
      ENDIF.


    ENDIF.


  ENDIF.

ENDFORM.